<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Emmie&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linxinemily.github.io/"/>
  <updated>2019-06-30T07:43:01.622Z</updated>
  <id>https://linxinemily.github.io/</id>
  
  <author>
    <name>Emmie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise.all() 與 async/await（和 axios）</title>
    <link href="https://linxinemily.github.io/2019/06/30/Promise-all%E8%88%87async-await%EF%BC%88%E5%92%8Caxios%EF%BC%89/"/>
    <id>https://linxinemily.github.io/2019/06/30/Promise-all與async-await（和axios）/</id>
    <published>2019-06-30T06:48:12.000Z</published>
    <updated>2019-06-30T07:43:01.622Z</updated>
    
    <content type="html"><![CDATA[<p>本來一直都用迴圈去處理同時發多個 request（很好懂但有點難處理 Error），這次親自來試試 Promise.all() 總算體驗到平行處理非同步的威力（？）於是紀錄一下心得以及和 await + axios 連用時的一些眉角。</p><a id="more"></a><h2 id="Promise-all-用法"><a href="#Promise-all-用法" class="headerlink" title="Promise.all() 用法"></a>Promise.all() 用法</h2><p>Promise.all () 接受一個陣列作為參數，陣列裡面每個元素都是 Promise 物件(也可以不是，待會會提到），它會同時平行去處理這些 Promise。由於<strong>其本身也是一個 Promise 物件</strong>，所以我們同樣可以用 then 或 await 去接他的 resolve/reject。<br>當 Promise.all () 裡面所有的 Promise 都被 resolve 後才會回傳 resolve，其值會是全部的 Promise 處理完後所回傳的 resolve 值所組成的陣列。但若其中有一個 Promise 被 reject 就會直接拋出該 Promise 所回傳的錯誤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> promiseArr = array1.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(x));</span><br><span class="line"><span class="built_in">console</span>.log(promiseArr) <span class="comment">// [Promise, Promise, Promise, Promise]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 then 接結果</span></span><br><span class="line"><span class="built_in">Promise</span>.all(promiseArr).then(<span class="function"><span class="params">vals</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(vals) <span class="comment">// [1, 4, 9, 16]</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 用 await 接結果</span></span><br><span class="line"><span class="keyword">const</span> vals = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promiseArr)</span><br><span class="line"><span class="built_in">console</span>.log(vals) <span class="comment">// [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure><blockquote><p>提醒： <code>await</code> 後面接的一定會是一個  Promise （或 async function），他會幫我們把 Promise 處理完後直接吐給我們 resovle 或 reject 的值。</p></blockquote><p>而當陣列裡面有非 Promise 物件的元素存在時，Promise.all() 仍會輸出該元素的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([a, b])</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="Promise-all-axios"><a href="#Promise-all-axios" class="headerlink" title="Promise.all() + axios"></a>Promise.all() + axios</h2><p>我們可以透過 map() 方法去製造 Promise 陣列（map() 會回傳一組新陣列）在下面的範例中， products 為一組商品物件的陣列，在這裡即利用 map () 遍歷每個物件，將物件資訊帶在 axios 的第二個參數（ request body）， 由於 axios 本身就是一個 promise，所以這樣一來就等同把原始陣列改為 Promise 陣列，就可以直接以丟進 Promise.all() 裡了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(<span class="keyword">this</span>.products.map(<span class="function">(<span class="params">product</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$axios.post(<span class="string">'http://localhost:8000/api/products'</span>, &#123;</span><br><span class="line">          name: product.name,</span><br><span class="line">          price: product.price,</span><br><span class="line">          order_id: myOrder_id</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br></pre></td></tr></table></figure><p>所以我們會得到一個陣列長這樣：</p><p><img src="/images/image.png" alt="圖片"></p><p>這時發現它長得好像不是我們要的 response data，那是因為 axios 的 response （resolve value）並非直接回 server 給我們的資料 ，而裡面那層 data 才是我們要的資料：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data: &#123;&#125;, <span class="comment">//這才是 server 回給我們的資料</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本來一直都用迴圈去處理同時發多個 request（很好懂但有點難處理 Error），這次親自來試試 Promise.all() 總算體驗到平行處理非同步的威力（？）於是紀錄一下心得以及和 await + axios 連用時的一些眉角。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://linxinemily.github.io/categories/Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue $attrs/$listeners 爺孫組件資料傳遞</title>
    <link href="https://linxinemily.github.io/2019/06/23/Vue%E7%88%BA%E5%AD%AB%E7%B5%84%E4%BB%B6%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E/"/>
    <id>https://linxinemily.github.io/2019/06/23/Vue爺孫組件資料傳遞/</id>
    <published>2019-06-23T14:38:02.000Z</published>
    <updated>2019-06-30T07:45:08.863Z</updated>
    
    <content type="html"><![CDATA[<p>平常在實作 Vue 組件之間的資料傳遞大部分都是透過 <code>props</code> 及 <code>$emit</code>，或是直接經由 Vuex 進行狀態管理，而除了這兩種方法，還有另外一種做法是透過 <code>$attrs</code> 及 <code>$listenter</code>。</p><a id="more"></a><p>本身也是因為之前偶然在查資料的時候看到這兩個 API，但當時看過別人寫的文章後卻只是似懂非懂，頂多知道有這個東西但不知道如何使用或該用在什麼場合，一直到實作時才真正理解它的用法，但多看多讀總是好的，有一天或許派得上用場。</p><h2 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a><code>$attrs</code></h2><p>其實簡單說就是子組件可以透過<code>$attrs</code>取得父組件當中<em>除了 Props 以外</em>的所有資料。</p><p>乍看之下好像沒什麼，那不就直接用 Props 就好了嗎？<br>但當在多重組件嵌套的情況之下，就會顯得很有用。我們先定義出三個組件，他們分別是： a-component（爺組件/模板）、b-component（父組件）、c-component（孫組件）</p><p>我們可以在 a 使用 b：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// a-component</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b-component</span> <span class="attr">:msg</span>=<span class="string">"hello"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接著在 b 中我們可以使用 <code>$attrs</code> 而不用透過 Props 拿到 <code>apiUrl</code>，並且將 <code>$attrs</code> 透過 <code>v-bind</code> 綁定在 c 上傳給 c 使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// b-component</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $attrs.data &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c-component</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然後同樣在 c 當中我們就能夠透過<code>$attrs</code>取得 a 的資料 。這樣一來的好處就是當我們有多個資料要從 a 傳給 b 跟 c 共用時，不用每一層都要聲明 Props，然後還要將每個 Props 寫在 component 的標籤裡面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// c-component</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $attrs.data &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>和 <code>$attrs</code> 相關的 API 還有 <code>inheritAttrs</code>，其值為布林值，預設為 <code>true</code>，也就是如果我們沒有特別將其設定成 <code>false</code>，子組件默認可以透過 <code>$attrs</code> 取得在父組件當中非透過 Props 繼承的資料。</p></blockquote><h2 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h2><p>應該不難猜想， <code>$attrs</code>  對應 Props ，<code>$listeners</code> 則對應 <code>$emit</code>。簡單來說就是父組件可以透過 <code>$listeners</code> 取得所有子組件 <code>$emit</code> 打出來的事件。同樣以上面三個組件為例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// c-component</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('sayHi')"</span>&gt;</span> click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 b 當中同樣可以透過 <code>v-on=&quot;$listeners&quot;</code>將 c 事件委任給 a：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// b-component</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c-component</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a 就可以直接處理 c 打出的<code>$emit</code>事件，而不用透過 b 再 emit 一次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// a-component</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b-component</span> @<span class="attr">sayHi</span>=<span class="string">"anEventHandler"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>所以當多重組件之間需要溝通傳遞，但不想用 Vuex 時，可以嘗試採用這兩種方法：<br>    * <code>$attrs</code>：孫組件取得爺組件的資料<br>    * <code>$listeners</code>：爺組件直接觸發孫組件的事件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平常在實作 Vue 組件之間的資料傳遞大部分都是透過 &lt;code&gt;props&lt;/code&gt; 及 &lt;code&gt;$emit&lt;/code&gt;，或是直接經由 Vuex 進行狀態管理，而除了這兩種方法，還有另外一種做法是透過 &lt;code&gt;$attrs&lt;/code&gt; 及 &lt;code&gt;$listenter&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://linxinemily.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 vue-echarts 踩的坑</title>
    <link href="https://linxinemily.github.io/2019/06/11/%E4%BD%BF%E7%94%A8vue-echarts%E8%B8%A9%E7%9A%84%E5%9D%91/"/>
    <id>https://linxinemily.github.io/2019/06/11/使用vue-echarts踩的坑/</id>
    <published>2019-06-11T04:29:13.308Z</published>
    <updated>2019-06-30T06:43:38.098Z</updated>
    
    <content type="html"><![CDATA[<p>第一次使用 Echarts 這套圖形 library，在 vue 中使用 Echarts 可以直接裝 vue-echart，官方文件推薦兩個都裝：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install echarts vue-echarts</span><br></pre></td></tr></table></figure><p>預料之中的踩了不少坑，在此紀錄一些重點。</p><a id="more"></a><h2 id="安裝完後引入並註冊圖表-component"><a href="#安裝完後引入並註冊圖表-component" class="headerlink" title="安裝完後引入並註冊圖表 component"></a>安裝完後引入並註冊圖表 component</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> ECharts <span class="keyword">from</span> <span class="string">'vue-echarts'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/chart/bar'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/component/tooltip'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts-gl'</span> <span class="comment">//等等會使用 grapic 設定圖形文字，故需載入此 module</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'v-chart'</span>, ECharts) <span class="comment">// 註冊為 global component</span></span><br></pre></td></tr></table></figure><h2 id="基礎使用"><a href="#基礎使用" class="headerlink" title="基礎使用"></a>基礎使用</h2><p>在 template 中可以直接使用圖表 component，其接收 <code>options</code> 為 props，裡面的<code>series</code>屬性為設置特定類型圖表的屬性，在此使用專案中的圓餅圖當範例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-chart</span> <span class="attr">:options</span>=<span class="string">"options"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">            series: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">'pie'</span>,  <span class="comment">// 必須</span></span><br><span class="line">                    name: <span class="string">'test'</span>, <span class="comment">// 必須</span></span><br><span class="line">                    radius: [<span class="string">'50%'</span>, <span class="string">'70%'</span>],</span><br><span class="line">                    label: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        show: <span class="literal">false</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    emphasis: &#123;</span><br><span class="line">                        show: <span class="literal">true</span>,</span><br><span class="line">                        formatter: <span class="string">'&#123;b&#125; &#123;@percentage&#125;%'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    data: [</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">'韓國'</span>, <span class="attr">value</span>: <span class="number">70</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">'日本'</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">'台灣'</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">'越南'</span>, <span class="attr">value</span>: <span class="number">6</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">'中國'</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">name</span>: <span class="string">'其他'</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="圓餅圖中間加入文字"><a href="#圓餅圖中間加入文字" class="headerlink" title="圓餅圖中間加入文字"></a>圓餅圖中間加入文字</h2><blockquote><p>注意：<strong>一定要裝 <code>echarts-gl</code> 模組</strong>，否則會無法顯示。<br>可以直接利用官方提供的屬性<code>grapic</code>為圖表自行添加圖形元素，並新增特定文字（可以新增的圖形元素類型還有圖片、圖形等，可以參考<a href="https://echarts.baidu.com/option.html#graphic" target="_blank" rel="noopener">文件</a>），格式如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graphic: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: <span class="string">'text'</span>,</span><br><span class="line">            left: <span class="string">'center'</span>,</span><br><span class="line">            top: <span class="string">'center'</span>,</span><br><span class="line">            style: &#123;</span><br><span class="line">              text: <span class="string">'學生國籍比例'</span>,</span><br><span class="line">              textAlign: <span class="string">'center'</span>,</span><br><span class="line">              fill: <span class="string">'#666'</span>,</span><br><span class="line">              font: <span class="string">'20px "STHeiti", sans-serif'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><h2 id="圖例說明（legend）需要添加-value-資料"><a href="#圖例說明（legend）需要添加-value-資料" class="headerlink" title="圖例說明（legend）需要添加 value 資料"></a>圖例說明（legend）需要添加 value 資料</h2><p>echarts 提供的 formater callback function 只有給我們 <code>name</code> 這個參數，所以要同時拿到 <code>value</code> 的話，會需要自己從圖表實例裡面找。</p><blockquote><p>注意：<strong>必須使用箭頭函式</strong>才能拿到這個 component 的實例，進而取得 <code>options.series[0].data</code> 得到我們要的 <code>value</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">          orient: <span class="string">'verticle'</span>,</span><br><span class="line">          left: <span class="string">'left'</span>,</span><br><span class="line">          bottom: <span class="string">'middle'</span>,</span><br><span class="line">          textStyle: &#123;</span><br><span class="line">            fontSize: <span class="number">16</span></span><br><span class="line">          &#125;,</span><br><span class="line">          formatter: <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">this</span>.options.series[<span class="number">0</span>].data</span><br><span class="line">            <span class="keyword">let</span> targetValue</span><br><span class="line">            data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (item.name === name) &#123;</span><br><span class="line">                targetValue = item.value</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">' '</span> + targetValue + <span class="string">'%'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h2 id="圖表的響應"><a href="#圖表的響應" class="headerlink" title="圖表的響應"></a>圖表的響應</h2><p>由於一開始設定圖例的排列方式為垂直排列、靠左並置中，但在行動裝置上這樣會破版，所以首先第一步先設定讓整個 Canvas 可以自適應容器大小縮放，實現方法其實只要修改 CSS 即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.echarts</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著就會面臨到圖例跟圖表本體重疊的問題，所以我們需要偵測視窗寬度大小，隨著裝置寬度不同改變圖例排列的方式。</p><h4 id="1-首先先在-component-上綁定-ref"><a href="#1-首先先在-component-上綁定-ref" class="headerlink" title="1. 首先先在 component 上綁定 ref"></a>1. 首先先在 component 上綁定 <code>ref</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-chart</span> <span class="attr">ref</span>=<span class="string">"myChart"</span> <span class="attr">:options</span>=<span class="string">"options"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-在-mounted-當中監聽-window-的-load-event，當頁面載入時計算當前螢幕寬度大小，再透過-ref-屬性訪問該圖表實例並修改其-options-legend-屬性（和圖例定位相關的屬性）"><a href="#2-在-mounted-當中監聽-window-的-load-event，當頁面載入時計算當前螢幕寬度大小，再透過-ref-屬性訪問該圖表實例並修改其-options-legend-屬性（和圖例定位相關的屬性）" class="headerlink" title="2. 在 mounted 當中監聽 window 的 load event，當頁面載入時計算當前螢幕寬度大小，再透過 ref 屬性訪問該圖表實例並修改其 options.legend 屬性（和圖例定位相關的屬性）"></a>2. 在 mounted 當中監聽 window 的 load event，當頁面載入時計算當前螢幕寬度大小，再透過 <code>ref</code> 屬性訪問該圖表實例並修改其 <code>options.legend</code> 屬性（和圖例定位相關的屬性）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.windowWidth = <span class="built_in">window</span>.screen.width</span><br><span class="line">      <span class="keyword">let</span> orient, left, bottom</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.windowWidth &lt; <span class="number">480</span>) &#123;</span><br><span class="line">        orient = <span class="string">'horizontal'</span></span><br><span class="line">        left = <span class="string">'center'</span></span><br><span class="line">        bottom = <span class="string">'bottom'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        orient = <span class="string">'vertical'</span></span><br><span class="line">        left = <span class="string">'left'</span></span><br><span class="line">        bottom = <span class="string">'middle'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.$refs.myChart) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs.myChart.options.legend.orient = orient</span><br><span class="line">        <span class="keyword">this</span>.$refs.myChart.options.legend.left = left</span><br><span class="line">        <span class="keyword">this</span>.$refs.myChart.options.legend.bottom = bottom</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：此綁定方法只有在頁面第一次渲染時才會有效，如果要實現 RWD 要再另外監聽 resize 事件。</p></blockquote><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><h4 id="1-如果要用到較多客製化功能要用-Echarts，否則才用-v-charts"><a href="#1-如果要用到較多客製化功能要用-Echarts，否則才用-v-charts" class="headerlink" title="1. 如果要用到較多客製化功能要用 Echarts，否則才用 v-charts"></a>1. 如果要用到較多客製化功能要用 Echarts，否則才用 v-charts</h4><p>在加入圓餅中間文字那裡卡滿久，原因是一開始裝的是 v-charts（算是輕量簡化版的 Echarts），推測目前還沒有支援到可以使用圖形文字（各種方式加入 <code>graphic</code> 屬性都未起作用），雖然也可能只是尚未找到解決方案（翻文件快翻到發瘋）。</p><h4 id="2-在-Vue-當中取得圖表實例的方法"><a href="#2-在-Vue-當中取得圖表實例的方法" class="headerlink" title="2. 在 Vue 當中取得圖表實例的方法"></a>2. 在 Vue 當中取得圖表實例的方法</h4><p>在 <code>options</code> 內部若用到其提供的回調函式，必須使用箭頭函式，拿到的 <code>this</code>才會是我們要的圖表實例物件（否則會是 undefined）。但在其他地方（Vue 的環境中）則要透過訪問 DOM 元素才能得到圖表實例物件。<br>目前的方法是這樣，但其實官方好像有提供其他可以訪問 <code>options</code>的 API（如 <code>computedOptions</code>，可參考<a href="https://github.com/ecomfe/vue-echarts#computed" target="_blank" rel="noopener">文件</a>） ，但我目前是都沒有成功過 QwQ，可能還需另外研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次使用 Echarts 這套圖形 library，在 vue 中使用 Echarts 可以直接裝 vue-echart，官方文件推薦兩個都裝：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install echarts vue-echarts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;預料之中的踩了不少坑，在此紀錄一些重點。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://linxinemily.github.io/categories/Vue/"/>
    
    
  </entry>
  
</feed>
