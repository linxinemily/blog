<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Emmie' s Workspace</title><link>/tags/javascript/</link><description>Recent content in Javascript on Emmie' s Workspace</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 30 Jun 2019 14:48:12 +0000</lastBuildDate><atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Promise.all() 與 async/await</title><link>/posts/promise-all%E8%88%87async-await%E5%92%8Caxios/</link><pubDate>Sun, 30 Jun 2019 14:48:12 +0000</pubDate><guid>/posts/promise-all%E8%88%87async-await%E5%92%8Caxios/</guid><description>&lt;p>本來一直都用迴圈去處理同時發多個 request（很好懂但有點難處理 Error），這次親自來試試 Promise.all() 總算體驗到平行處理非同步的威力（？）於是紀錄一下心得以及和 await + axios 連用時的一些眉角。&lt;/p>
&lt;!-- more -->
&lt;h2 id="promiseall-用法">
 &lt;a href="#promiseall-%e7%94%a8%e6%b3%95" class="anchor">
 &lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
 &lt;path fill-rule="evenodd"
 d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
 &lt;/path>
 &lt;/svg>
 &lt;/a>
 Promise.all() 用法
&lt;/h2>
&lt;p>Promise.all (&lt;code>iterable&lt;/code>) 接受一個 iterable 物件（通常是陣列）作為參數，當裡面每個元素都是 Promise 物件時(也可以不是，待會會提到），它就會平行去處理這些 Promise。由於&lt;strong>其本身會回傳一個 Promise 物件&lt;/strong>，所以我們同樣可以用 then 或 await 去接他的 resolve/reject。
當所有的 Promise 都被 resolve 後才會回傳 resolve，其值會是全部的 Promise 處理完後所回傳的 resolve 值所組成的陣列。但若其中有一個 Promise 被 reject 就會直接拋出該 Promise 所回傳的錯誤。&lt;/p></description></item></channel></rss>